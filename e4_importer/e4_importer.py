# -*- coding: utf-8 -*-
"""
/***************************************************************************
 E4Importer
                                 A QGIS plugin
 A plugin that allows to import E4 EDA data together with a GPX file to visualize the electrodermalactivity during a walk
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-03
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Markus LÃ¶chtefeld
        email                : loechti@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .e4_importer_dialog import E4ImporterDialog
import os.path
import subprocess
import sys
import threading
from datetime import datetime

plugin_dir = os.path.dirname(__file__)

try:
    import ledapy
except:
    print("Install Ledapy")
    subprocess.call(['pip', 'install', 'ledapy'])


try:
    import gpxpy
except:
    print("Installing gpxpy")
    subprocess.call(['pip', 'install', 'gpxpy'])


class DataPoint:
    def __init__(self,lat,lon, time, elev):
        self.timeStamp = time
        self.latitude = lat
        self.longitude = lon
        self.elevation = elev
        self.EDA_data = []
        self.averageEDA = 0
    #function to calculate the average EDA of all the points that have been assigned to this datapoint
    def calc_avg_EDA(self):
        if(len(self.EDA_data) != 0):
            avg = 0
            for d in self.EDA_data:
                avg = avg + d
            self.averageEDA = avg / len(self.EDA_data)


class E4Importer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'E4Importer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&E4 Data Importer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('E4Importer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/e4_importer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'E4 Data Importer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&E4 Data Importer'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_GPX_file(self):
      filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select GPX file ","", '*.gpx')
      self.dlg.lEGPX_File.setText(filename)

    def select_CSV_file(self):
      filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select E4 EDA CSV file ","", '*.csv')
      self.dlg.lECSV_File.setText(filename)

    
    #Find the closest GPS point based on the timestamp and add it to that point
    def findClosestPoint(self, t, d, dps):
        min = float('inf')
        id = -1
        for i in range(len(dps)):
            dt = abs(dps[i].timeStamp - t)
            if(dt < min):
                min = dt
                id = i
            if(dt > min):
                break
        dps[id].EDA_data.append(d)


    #calculate the moving average window to smooth out the data
    def calc_moving_window(self, data, window):
        window_size = window
        i = 0
        moving_averages = []
        while i < len(data) - window_size + 1:
            this_window = data[i : i + window_size]
            window_average = sum(this_window) / window_size
            moving_averages.append(window_average)
            i += 1
        while i < len(data):
            moving_averages.append(data[i])
            i += 1
        return moving_averages

    #function that will load the data and import it (should be only called in a thread will block UI)
    def startLayerImport(self, calcPhasic, gpx_filename, eda_filename):
        print(gpx_filename, eda_filename)
        #vlayer = QgsVectorLayer(gpx_filename + "|layername=track_points", "E4-EDA Import", "ogr")
        #QgsProject.instance().addMapLayer(vlayer)
        
        gpx_file = open(gpx_filename)
        gpx = gpxpy.parse(gpx_file)

        dps = []

        #create super resolution datapoints
        for track in gpx.tracks:
            for segment in track.segments:
                for i in range(len(segment.points)-1):
                    #add current gpx point and add a super resolution point between this one and the next
                    dps.append(DataPoint(segment.points[i].latitude, segment.points[i].longitude, segment.points[i].time.timestamp(), segment.points[i].elevation))
                    lat = (segment.points[i].latitude + segment.points[i+1].latitude) / 2
                    lon = (segment.points[i].longitude + segment.points[i+1].longitude) / 2
                    time = (segment.points[i].time.timestamp() + segment.points[i+1].time.timestamp()) / 2
                    elev = (segment.points[i].elevation + segment.points[i+1].elevation) / 2
                    dps.append(DataPoint(lat,lon,time, elev))
        #add the last point of the array (was missing before)
        dps.append(DataPoint(segment.points[len(segment.points)-1].latitude, segment.points[len(segment.points)-1].longitude, segment.points[len(segment.points)-1].time.timestamp(),segment.points[len(segment.points)-1].elevation))


        #read in the raw EDA data
        rawdata = []
        sampling_rate = 4
        initial_Timestamp = 0
        #we are leaving out the first two (usually flawed data points) and add 1-10 seconds of delay due to EDA response time
        time = 8

        with open(str(eda_filename), "r") as f:
            lines = f.readlines()
            #read initial timestamp and add it to the current time
            initial_Timestamp = float(lines[0])
            time = time + initial_Timestamp
            #read in the raw data
            for i in range(2,len(lines)):
                rawdata.append(float(lines[i]))

        #smooth out the data
        smoothed_data = self.calc_moving_window(rawdata, 16)

        # calculate the phasic data if selected
        if calcPhasic:
            phasicdata = ledapy.runner.getResult(smoothed_data, 'phasicdata', sampling_rate,downsample=4, optimisation=2)
        else:
            phasicdata = smoothed_data

        #add the points to the datapoints
        for p in phasicdata:
            self.findClosestPoint(time, p, dps)
            time = time + 1

        #create new vector layer to contain the gpx and eda data
        layer = QgsVectorLayer('Point?crs=epsg:4326', 'GPX EDA Import' , 'memory')
        prov = layer.dataProvider()
        layer.startEditing()
        # Set the provider to accept the data source
        
        prov.addAttributes([QgsField("time", QVariant.String),
                            QgsField("elevation", QVariant.Double),
                            QgsField("EDA", QVariant.Double)])
        layer.updateFields()
        

        print(len(dps))
        # add the DPS points to the new vector layer
        for dp in dps:
            #calculate the average data points
            dp.calc_avg_EDA()
            f = QgsFeature()
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(dp.longitude,dp.latitude)))
            f.setAttributes([str(int(dp.timeStamp)), dp.elevation, float(dp.averageEDA*100)])
            prov.addFeature(f)
            layer.commitChanges()
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = E4ImporterDialog()
            self.dlg.pBGPX_File.clicked.connect(self.select_GPX_file)
            self.dlg.pBCSV_File.clicked.connect(self.select_CSV_file)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            calcPhasic = self.dlg.phasicCheckBox.isChecked()
            gpx_filename = self.dlg.lEGPX_File.text() 
            eda_filename = self.dlg.lECSV_File.text()
            progressMessageBar = self.iface.messageBar().createMessage("E4 Importer:", "Import GPX and EDA started...")
            self.iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)
            threading.Thread(target=self.startLayerImport, args=(calcPhasic,gpx_filename,eda_filename,)).start()
            pass
